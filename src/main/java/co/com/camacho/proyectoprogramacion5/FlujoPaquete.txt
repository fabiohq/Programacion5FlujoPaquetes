package co.com.camacho.proyectoprogramacion5;
import java.io.File;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Jackeline Ramirez 20/06/2019
 * @Materia ProgramacionV
 * @Definición El proyecto consiste en dar solución al problema de estudio que
 * se enunciara mas adelante. El estudiante debe presentar dos soluciones
 * computacionales. Los detalles de las soluciones se presentan más adelante.
 * Nuestra empresa necesita enviar un ujo de paquetes a un servidor para que
 * estos sean procesados. Dentro del ujo de datos, se envían paquetes de
 * diferentes tipos como : Vídeo, Música, Imágenes, Texto, Binarios, etc. Sin
 * embargo, debido a ataques recientes realizados al servidor, donde los ujo de
 * datos conten ían muchos paquetes de un mismo tipo, se implemento una nueva
 * medida de seguridad. Esta medida de seguridad consiste en ignorar (no
 * procesar) los paquetes de tipo en un ujo de datos cuando la cantidad total de
 * ese tipo de paquete en el ujo supera un limite M. Por ejemplo, si M es 5, y
 * nuestro ujo de datos contiene 3 paquetes de Vídeos, 7 de Música, 4 de
 * Imágenes, 5 de texto y 8 Binarios, el servidor solo procesara los paquetes de
 * Vídeos, de imágenes y de texto. Los paquetes de Musida y binarios no serán
 * procesados debido a que superan el limite permitido.
 */
public class FlujoPaquete {

    public void procesarPaquete(String strPaquetes) {
        String[] arrayPaquetes = new String[strPaquetes.length()];//Vector que almacenara los caracteres de la cadena al cual se le da un tamaño dependiento el tamaño de la cadena
        int totalSegmentos = strPaquetes.length();//Se saca el total de caracteres de la cadena recibida
        int M = 2;//Conincidencias que de paquetes que se pueden procesar
        Map<String, Integer> mapSegmentos = new HashMap<>();//hashmap para almacenar los pauqtes procesados encontradas en la cadena
        boolean registrar = true;//Vandera que permite realizaar registros en el hashmap siempre y cuando las coincidenciaas encontradas coincidan con las solicitadas
        int contador = 0;
        //Se itera la cadena recibida y se almacena cada caracter en una pocicion del arreglo
        //para acceder de forma facil a los datos que ésta contiene 
        for (int i = 0; i < totalSegmentos; i++) {
            char c = strPaquetes.charAt(i);
            arrayPaquetes[i] = Character.toString(c);
        }
        StringBuilder sb = new StringBuilder();//El StringBuilder se usa para hacer mas eficiente la concatenacion
        sb.append("\n=================\nJackeline Ramirez\n=================\nTotal Caracteres ");
        sb.append(totalSegmentos);

        sb.append("\n\nLongitud ");
        sb.append("Segmentos \n");
        System.out.println(sb.toString());//Se imprime por consola total de caracteres que contiene la cadena y la cabecera longitud y los segmentos
        crearArchivoTexto(sb.toString());
        //Se itera para imprimir los valores de la longitud y segmento
        for (int i = 0; i < arrayPaquetes.length; i++) {
            sb.setLength(0);
            sb.append("    ");
            sb.append((i + 1));
            sb.append("     ");
            if (totalSegmentos == strPaquetes.length()) {
                sb.append(totalSegmentos);
            } else {
                sb.append((totalSegmentos));
            }
            sb.append("\n");
            totalSegmentos--;
            //if ((i + 1) == M) {
            System.out.println(sb.toString());
            crearArchivoTexto(sb.toString());
            //}

        }
        //Se iteran el vector que contiene los caracteres de la cadena recibida 
        //buscando paquetes que no superen el establecido en M

        for (int i = 0; i < strPaquetes.length(); i++) {
            String c1 = arrayPaquetes[i];
            for (int j = 0; j < strPaquetes.length(); j++) {
                String c = arrayPaquetes[j];
                if (c1.equals(c)) {
                    contador++;
                    if (contador > M) {//Si se supera la cantidad de paquetes estableciadas no se registraara en el Hashmap
                        registrar = false;
                        break;
                    }
                }
            }
            //Si registrar = true se registran las coincidencias en el hashmap donde la llave es el paquete procesado o letra 
            //y el valor es la contidad de coincidencias encontraadas 
            if (registrar) {
                mapSegmentos.put(c1, contador);
            }
            contador = 0;
            registrar = true;
        }
        //Se recorre HashmaP y se imprime por consola los pauqtes procesados
        String texto="\nNumero de paquetes procesados\n";
        System.out.println(texto);
        crearArchivoTexto(texto);
        for (Map.Entry<String, Integer> entry : mapSegmentos.entrySet()) {
            sb.setLength(0);
            sb.append("Paquete: ");
            sb.append(entry.getKey());
            sb.append(" - Cantidad: ");
            sb.append(entry.getValue());
            sb.append("\n");
            System.out.println(sb.toString());
            crearArchivoTexto(sb.toString());
            sb.setLength(0);
        }

    }

    public void crearArchivoTexto(String pStrCadena) {
        try {
            File archivo = new File("ArchiviPaquetes.txt");
            FileWriter escribir = new FileWriter(archivo, true);
            escribir.write(pStrCadena);
            escribir.close();
        } catch (Exception e) {
            System.err.println("Error aal escribir");
        }
    }

    public static void main(String args[]) {
        FlujoPaquete fp = new FlujoPaquete();
        fp.procesarPaquete("CCDFBBBAACAEA");
    }
}
